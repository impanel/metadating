/* AS3	Copyright 2009 __MyCompanyName__.*/package {		import flash.events.*;	import VerhoerObject;	import flash.display.*;	/**	 *	Class description.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Sven Gali	 *	@since  01.02.2009	 */	public class CalcVerhoer extends MovieClip {				//--------------------------------------		// CLASS CONSTANTS		//--------------------------------------				//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------				/**		 *	@Constructor		 */		public function CalcVerhoer(){					}				//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------				private var playList: Array;		private var videoObjects: Array;				/**Akt-Array**/		private var startObj: Array;		private var starter_arr: Array;		private var anfang_arr: Array;		private var mitte_arr: Array;		private var mitte_arr_kom: Array;		private var ende_schuldig_arr: Array;		private var ende_unschuldig_arr: Array;				/**Temp und Steuervariablen**/		private var bewertung_neg: int;		private var bewertung_pos: int;		private var oneVar: Boolean;				private var currentVideoIndex: int;		private var absolutIndex: int;		private var currentVidObj: VerhoerObject;						//--------------------------------------		//  GETTER/SETTERS		//--------------------------------------				//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------						public function calculateClips(xml:XMLList): Array {			playList = new Array ();			videoObjects = new Array ();						startObj = new Array ();			anfang_arr = new Array ();			mitte_arr = new Array ();			mitte_arr_kom = new Array ();			ende_schuldig_arr = new Array ();			ende_unschuldig_arr = new Array ();						for (var i:int = 0; i<xml.length(); i++)			//Videoobjecte parsen und in Array legen			{				videoObjects[i] = new VerhoerObject (													  i 																		, xml[i].file.text()															, xml[i].myRole.text()															, xml[i].myCategory.text()													, xml[i].myAct.text()													, xml[i].myTimes.text()													, xml[i].startenabled.text()														, xml[i].myFunction.text()													, xml[i].myAttribut.text()													, xml[i].myTags													, xml[i].Role.text()													, xml[i].category.text()													, xml[i].funktion.text()													, xml[i].attribut.text()													, xml[i].tags												);								if(videoObjects[i].getUrl == "intro.mov")    				//Intro Clip herausnehmen				{					playList.push("intro.mov");				}else{					switch(videoObjects[i].getMyAct){						// Aktzuweisung...						case "Einleitung": 														if(videoObjects[i].getStartenabled == "ja")		// Anfangsobjekte							{								startObj.push(videoObjects[i]);							}else{								anfang_arr.push(videoObjects[i]);							}						break;						case "Haupteil": 							mitte_arr.push(videoObjects[i]);							if(videoObjects[i].getMyRole == "Kommissar")	// Anfangsobjekte Kommissar							{								mitte_arr_kom.push(videoObjects[i]);							}						break;						case "Schluss": 							if(videoObjects[i].getMyFunction == "Schuldig")	// Schuldig-differenzierung							{								ende_schuldig_arr.push(videoObjects[i]);							}else							{								ende_unschuldig_arr.push(videoObjects[i]);							}						break;					}				}			}			/*			for(var i:int = 0; i< videoObjects.length; i++)			{				if(videoObjects[i].getMyRole == "Kommissar"){					trace("Kommissar: "+videoObjects[i].getUrl);				}else if(videoObjects[i].getMyRole == "Verdaechtiger"){					trace("Verdächtige: "+videoObjects[i].getUrl);				}			}			//propertyTest:			trace("startObj: "+startObj.length);			trace("anfang_arr: "+anfang_arr.length);			trace("mitte_arr: "+mitte_arr.length);			trace("mitte_arr_kom: "+mitte_arr_kom.length);			trace("ende_schuldig_arr: "+ende_schuldig_arr.length);			trace("ende_unschuldig_arr: "+ende_unschuldig_arr.length);			trace("Clips erfolgreich geparst!");									/** Random Einleitungsclip **/			currentVideoIndex = Math.round((startObj.length-1)*Math.random());			playList.push(startObj[currentVideoIndex].getUrl);						currentVidObj = startObj[currentVideoIndex];									/** Meta-Suchloop: Einleitung **/			for (var j:int = 0; j<4; j++)			{						trace(j+". ERster Durchlauf-------------------------------------------------------------------------------------");				absolutIndex = checkNachfolger(anfang_arr, currentVidObj);				trace("AbsoulutIndex: "+absolutIndex);				if(absolutIndex != 999)				{					playList.push(anfang_arr[absolutIndex].getUrl);					currentVidObj = anfang_arr[absolutIndex];					anfang_arr.splice(absolutIndex,1);				}			}									/** Meta-Suchlauf: Mitte **/			for (var j:int = 0; j<9; j++)			{				trace(j+". Zweiter Durchlauf-------------------------------------------------------------------------------------");				absolutIndex = checkNachfolger(mitte_arr, currentVidObj);				trace("AbsoulutIndex: "+absolutIndex);				if(absolutIndex != 999){					playList.push(mitte_arr[absolutIndex].getUrl);					currentVidObj = mitte_arr[absolutIndex];					mitte_arr.splice(absolutIndex,1);					}			}						/** Random Schluss **/			if(Math.random()<0.5)			{				currentVideoIndex = randRolle(ende_schuldig_arr, "Kommissar");				playList.push(ende_schuldig_arr[currentVideoIndex].getUrl);				currentVidObj = ende_schuldig_arr[currentVideoIndex];				ende_schuldig_arr.splice(absolutIndex,1);									for (var j:int = 0; j<5; j++)			//Meta-Suchlauf für Schluss				{					absolutIndex = checkNachfolger(ende_schuldig_arr, currentVidObj);										if(absolutIndex != 999)					{						playList.push(ende_schuldig_arr[absolutIndex].getUrl);						currentVidObj = ende_schuldig_arr[absolutIndex];						ende_schuldig_arr.splice(absolutIndex,1);						}				}			}else{				currentVideoIndex = randRolle(ende_unschuldig_arr, "Kommissar");				playList.push(ende_unschuldig_arr[currentVideoIndex].getUrl);				currentVidObj = ende_unschuldig_arr[currentVideoIndex];				ende_unschuldig_arr.splice(absolutIndex,1);									for (var j:int = 0; j<5; j++)			//Meta-Suchlauf für Schluss				{					absolutIndex = checkNachfolger(ende_unschuldig_arr, currentVidObj);										if(absolutIndex != 999)					{						playList.push(ende_unschuldig_arr[absolutIndex].getUrl);						currentVidObj = ende_unschuldig_arr[absolutIndex];						ende_unschuldig_arr.splice(absolutIndex,1);						}				}			}						/** Outro-Clips **/			playList.push("outro.mov");			trace(playList);			return playList;		}						private function checkNachfolger (arr_type:Array, curVid:VerhoerObject): int 		{			var tempObject: Object = new Object ();			tempObject.matchVar = 0;			tempObject.idx = 0;						var _vergl_arr:Array = [];					for (var i:int = 0;  i<arr_type.length; i++) 			{												arr_type[i].myMatchVar = 0;											//Matchvariable zurücksetzen								if(arr_type[i].getMyRole != curVid.getMyRole)						//Nur die Clips mit Hardfacts				{					if(arr_type[i].getMyCategory == curVid.getKategorie)					{										if (arr_type[i].getFunktion == curVid.getMyFunction)		//Rolle und Kategorie checken						{							arr_type[i].myMatchVar += 3;						}						if (arr_type[i].getAttribut == curVid.getMyAttribut)						{							arr_type[i].myMatchVar += 3;						}						for each (var item in arr_type[i].getTags)			//Tags checken						{								for each (var tag in curVid.getMyTags)							{								if(item == tag) arr_type[i].myMatchVar++;							}						}						if( tempObject.matchVar <= arr_type[i].myMatchVar)	//Vergleichen ob matchVar höher als Vorgänger						{							trace("Match_VAr: "+arr_type[i].myMatchVar);							trace("Rolle: "+arr_type[i].getMyRole);							tempObject.matchVar = arr_type[i].myMatchVar;							tempObject.idx = i;							_vergl_arr.push(i);						}					}				}											}			_vergl_arr.reverse();			if(_vergl_arr.length>1){				//return _vergl_arr[0];				return _vergl_arr[Math.round(Math.random())];				}else{				return 999;			}			}				private function randRolle (_arr:Array, _s:String): int 		{			var _tarr:Array = new Array();			var _ind: int;			for(var i:int=0; i<_arr.length; i++)			{				if(_arr[i].getMyRole == _s)				{					_tarr.push(i);				}				}			_ind = Math.round((_tarr.length-1)*Math.random());						return _tarr[_ind];		}			/** Property-Test 			private function propertyTest ():void {			trace("URL: " + videoObjects[1].getUrl);			trace("myRoll: " + videoObjects[1].getMyRole);			trace("myCategory: " + videoObjects[1].getMyCategory);			trace("myFunction: " + videoObjects[1].getMyFunction);			//trace("myStregth: " + videoObjects[1].getMyStrength);			//trace("mySzenario: " + videoObjects[1].getMySzenario);			trace("myAttribut: " + videoObjects[1].getMyAttribut);			trace("myTags: " + videoObjects[1].getMyTags);			//trace("myPattern: " + videoObjects[1].getMyPattern);			//trace("myStartenabled: " + videoObjects[1].getMyStartEnabled);			trace("Kategorie: " + videoObjects[1].getKategorie);			trace("Funktion: " + videoObjects[1].getFunktion);			trace("Attribut: " + videoObjects[1].getAttribut);			trace("Tags: " + videoObjects[1].getTags);		}		**/	}}