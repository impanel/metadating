/* AS3	Copyright 2008 __MyCompanyName__.*/package {	/**	 *	Class description.	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Sven Krome	 *	@since  16.11.2008	 */	import flash.events.*;	import flash.display.*;	import flash.media.*;	import flash.text.*;	import flash.system.*;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.geom.*;	import BouncerSound;	import Debug;	import Presentation;	import SoundPlayer;		// TIMER	import flash.utils.Timer;	import flash.events.TimerEvent;		import XMLload;		//BUTTONS	import BtnClose;	import BtnReload;	import BtnStrategy;		public class Player extends MovieClip 	{				//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------				/**		 *	@Constructor		 */		public function Player():void 		{			build();		}				//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------				private var nc:NetConnection;		private var ns:NetStream;		private var client:Object;		private var meta:Object;		private var vid: Video;		private var vidContainer:MovieClip = new MovieClip();		private var _stage:Stage = stage;				//BUTTONS		private var btn_close:BtnClose = new BtnClose();		private var btn_reload:BtnReload = new BtnReload();		private var btn_strategy:BtnStrategy = new BtnStrategy();						// Elements for DebugMode		private var metaInfo:TextField = new TextField();		private var debug:Debug = new Debug();		private var debugArray:Array;		private var presentation:Presentation = new Presentation(vidContainer);		//		private var playList:Array;		private var speechList:Array;		private var musicList:Array;		private var bPause:Boolean = true;				private var genre:String;								private var snd_Astro: AstroSound;		private var sndCan_Astro:SoundChannel;				private var snd_Bouncer: BouncerSound;		private var sndCan_Bouncer:SoundChannel;				//2011		///////SETTINGS//////////////////////////		private var DEBUG:Boolean = false;		private var PRESENTATION:Boolean = false;		/////////////////////////////////////////				private var snd_Meat: MeatSound;		private var sndCan_Meat:SoundChannel;		private var snd_Hero_1: HeroSound_1;		private var sndCan_Hero_1:SoundChannel = new SoundChannel;		private var snd_Hero_2: HeroSound_2;		private var sndCan_Hero_2:SoundChannel = new SoundChannel;		private var speechAdvert:SoundPlayer;		private var musicAdvert:SoundPlayer;				private var playBool:Boolean;		private var bNextSound:Boolean = true;				// Size of videos		private const VIDEO_WIDTH_KLUGE:int = 640;		private const VIDEO_HEIGHT_KLUGE:int = 480;		private const VIDEO_WIDTH_ASTRO:int = 786;		private const VIDEO_HEIGHT_ASTRO:int = 576;		private const VIDEO_WIDTH_BOUNCER:int = 1280;		private const VIDEO_HEIGHT_BOUNCER:int = 720;		private const VIDEO_WIDTH_HOTLINE:int = 1280;		private const VIDEO_HEIGHT_HOTLINE:int = 720;		private const VIDEO_WIDTH_DEMO:int = 1280;		private const VIDEO_HEIGHT_DEMO:int = 720;				//TIMER		//Initialize Timer for Utils.genre == meat		var myTimer:Timer = new Timer(Utils._time, 1);		//var errorTimer = new Timer(500, 1); // not used yet				private var xmlLoad:XMLload = new XMLload();				//--------------------------------------		//  GETTER/SETTERS		//--------------------------------------				//--------------------------------------		//  PUBLIC METHODS		//--------------------------------------		public function starte(_playList:Array, _speechList:Array = null, _musicList:Array = null):void		{									//Sounds einbinden:			snd_Astro = new AstroSound ();			snd_Bouncer = new BouncerSound();			snd_Meat = new MeatSound();			snd_Hero_1 = new HeroSound_1();			snd_Hero_2 = new HeroSound_2();			speechAdvert = new SoundPlayer();			musicAdvert = new SoundPlayer();						playList = _playList;			speechList = _speechList;			musicList = _musicList;			//trace("SPEECHLIST: " + speechList);			//trace("MUSICLIST: " + musicList);						if(playList.length < 3) Utils.errorText = "- Kombination nicht fehlerfrei möglich";			else Utils.errorText = "none";						if(Utils.genre == "kluge")			{				setVideo(VIDEO_WIDTH_KLUGE, VIDEO_HEIGHT_KLUGE);				//sndCan = snd_F.play(0,9);						}						if(Utils.genre == "astro")			{				vid.x = 240;				vid.y = 66;				vid.width = 786;				vid.height = 576;				//setVideo(VIDEO_WIDTH_ASTRO, VIDEO_HEIGHT_ASTRO);			}						if(Utils.genre == "bouncer")			{				setVideo(VIDEO_WIDTH_BOUNCER, VIDEO_HEIGHT_BOUNCER);			}						if(Utils.genre == "hotline")			{				setVideo(VIDEO_WIDTH_HOTLINE, VIDEO_HEIGHT_HOTLINE);			}						if(Utils.genre == "demo")			{				setVideo(VIDEO_WIDTH_DEMO, VIDEO_HEIGHT_DEMO);			}						if(Utils.genre == "videoTests")			{				standardVidSetup();			}						if(Utils.genre == "meat")			{				standardVidSetup();				myTimer.start();				myTimer.addEventListener(TimerEvent.TIMER, starteSound);				PRESENTATION = true;			}						if(Utils.genre == "hero")			{				standardVidSetup();				PRESENTATION = true;			}						if(Utils.genre == "advert")			{				standardVidSetup()				speechAdvert.playSound("media/advert/" + speechList[0]);				musicAdvert.playSound("media/advert/" + musicList[0]);				PRESENTATION = false;			}						if(Utils.genre == "wedding1")			{				standardVidSetup();				PRESENTATION = false;			}						if(Utils.genre == "brd")			{				standardVidSetup();				PRESENTATION = false;			}						if(Utils.genre == "wedding2")			{				standardVidSetup();				PRESENTATION = false;			}						vid.attachNetStream(ns);						//stage.fullScreenSourceRect = new Rectangle(0 ,0, 1280, 720);			//stage.scaleMode = 			//debug.drawRect(stage, stage.localToGlobal(myPoint).x, stage.localToGlobal(myPoint).y, stage.fullScreenWidth, stage.fullScreenHeight, 0x000000, 1);			//stage.fullScreenSourceRect = new Rectangle(0 ,0, 1280, 720);						ns.play("media/"+ Utils.genre +"/"+ playList[0]);												addChild(vidContainer);			vidContainer.addChild(vid);						if(Utils.toggleDebug) debug.drawRect(vidContainer, 10, 10, 280, 680, 0xFFFFFF, .5); // draw Background for debug text			if(PRESENTATION) presentation.setupPresentationInfo(30);						//close Button			var btnClosePoint:Point = new Point(1200, 30);			btn_close.x = 1200;			btn_close.y = 30;			btn_close.alpha = .75;			vidContainer.addChild(btn_close);			btn_close.addEventListener(MouseEvent.CLICK, stopVideo);			//reload Button			//var btnReloadPoint:Point = new Point(1200, 640);			btn_reload.x = 1200;			btn_reload.y = 640;			btn_reload.alpha = .75;			vidContainer.addChild(btn_reload);			btn_reload.addEventListener(MouseEvent.CLICK, reloadVideo);									//strategy Button			/*			if(Utils.genre == "meat" || Utils.genre == "hero")			{				btn_strategy.x = 1120;				btn_strategy.y = 640;				btn_strategy.alpha = .75;				vidContainer.addChild(btn_strategy);				btn_strategy.addEventListener(MouseEvent.CLICK, showStrategy);			}			*/		}						public function stopVideo(e:MouseEvent = null):void		{			//speechAdvert.stopSound();			killSound();			if(PRESENTATION) presentation.togglePresentation = true;			if(Utils.genre == "meat" || Utils.genre == "hero") presentation.clearThis();			myTimer.stop();			ns.pause();			vid.clear();			ns.close();			if(Utils.toggleDebug) debug.clearInfo(vidContainer);			stage.fullScreenSourceRect = null;			removeChild(vidContainer);			Utils.idx = 0;		}		//--------------------------------------		//  EVENT HANDLERS		//--------------------------------------				//--------------------------------------		//  PRIVATE & PROTECTED INSTANCE METHODS		//--------------------------------------				private function build() : void 		{			vid = new Video();			Utils.idx = 0;			client = new Object();			client.onMetaData = metadataHandler;							nc = new NetConnection();			nc.connect(null);					ns = new NetStream(nc);			ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			ns.client = client;											// EVENT HANDLERS			vidContainer.addEventListener(MouseEvent.CLICK, togglePause);			//vidContainer.addEventListener(MouseEvent.CLICK, removeRect);		}				private function metadataHandler(metadataObj:Object):void 		{			meta = metadataObj;			trace(meta.duration);		}				private function netStatusHandler(event:NetStatusEvent):void 		{			try 			{				switch (event.info.code) 				{					case "NetStream.Play.Start" :						// Debug Mode updates every new Video						if(Utils.toggleDebug) debug.drawMetaInfo(MetaDating.debugArray, playList, Utils.genre, Utils.idx, vidContainer);						if(Utils.toggleDebug && Utils.genre == "advert") debug.showPlayList(vidContainer, playList, 380, speechList, musicList);						//presentation.drawRect(vidContainer, 10, 10, 200, 90, 0x000000, .5);						if(PRESENTATION)						//if(presentation.togglePresentation)						presentation.drawPresentationInfo(MetaDating.debugArray, Utils.idx);					break;					case "NetStream.Play.StreamNotFound" :					case "NetStream.Play.Stop" :						nextVid();						if(Utils.genre == "advert")	nextSound();						break;				}			} catch (error:TypeError) {				// Ignore any errors.			}		}							private function starteSound(e:TimerEvent = null):void		{			if(Utils.genre == "astro")			{						sndCan_Astro=snd_Astro.play(0, int.MAX_VALUE);				var trans:SoundTransform = new SoundTransform(0.07);				sndCan_Astro.soundTransform = trans;				playBool = true;			}						if(Utils.genre == "bouncer")			{						sndCan_Bouncer=snd_Bouncer.play(0,int.MAX_VALUE);				//var trans:SoundTransform = new SoundTransform(0.1);				//sndCan_Bouncer.soundTransform = trans;				playBool = true;			}						if(Utils.genre == "meat")			{				sndCan_Meat = snd_Meat.play(0, int.MAX_VALUE);				var trans:SoundTransform = new SoundTransform(0.03);				sndCan_Meat.soundTransform = trans;				playBool = true;			}						if(Utils.genre == "hero")			{				sndCan_Hero_1 = snd_Hero_1.play(0, int.MAX_VALUE);				sndCan_Hero_2 = snd_Hero_2.play(0, int.MAX_VALUE);				var trans1:SoundTransform = new SoundTransform(0.3); // Wind loop ??				var trans2:SoundTransform = new SoundTransform(0.3); // Batman loop ??				sndCan_Hero_1.soundTransform = trans1;				sndCan_Hero_2.soundTransform = trans2;				playBool = true;			}						if(Utils.genre == "advert")			{				trace("Sound Advert startet");			}		}				private function killSound():void		{			if(Utils.genre == "astro")			{				sndCan_Astro.stop();				playBool=false;			}						if(Utils.genre == "bouncer")			{				sndCan_Bouncer.stop();				playBool=false;			}						if(Utils.genre == "meat")			{				sndCan_Meat.stop();				playBool=false;				trace("sound stopped");			}						if(Utils.genre == "hero")			{				trace("STOP SOUND HERO");				sndCan_Hero_1.stop();				sndCan_Hero_2.stop();				playBool=false;			}						if (Utils.genre == "advert")			{				speechAdvert.stopSound();				musicAdvert.stopSound();			}		}				public function killAllSound():void		{			if(sndCan_Bouncer)			{				sndCan_Bouncer.stop();			}						if(sndCan_Astro){				sndCan_Astro.stop();			}						if(sndCan_Meat){				sndCan_Meat.stop();			}						if(sndCan_Hero_1)			{				sndCan_Hero_1.stop();				sndCan_Hero_2.stop();			}		}				private function setVideo(videoX:int, videoY:int):void		{				vid.x = stage.stageWidth/2 - videoX/2;				vid.y = stage.stageHeight/2 - videoY/2;				vid.width = videoX;				vid.height = videoY;		}				public function togglePause(e:MouseEvent = null):void		{							if(bPause)			{				ns.pause();				if(Utils.genre == "advert")				{					speechAdvert.togglePauseSound();					musicAdvert.togglePauseSound();				}				trace("pause");				bPause = false;			}			else			{				ns.resume();				trace("play");				bPause = true;			}		}				public function previousVid(e:MouseEvent = null):void		{			trace("previous Video");			Utils.idx--;			ns.play(Utils.genre+"/"+ playList[Utils.idx]);			//trace("Utils.idx: " + Utils.idx);		}				public function nextVid(e:MouseEvent = null):void		{			Utils.idx++;			trace("next Video");			//playList.shift();			//ns.close();			if(Utils.idx>=playList.length)			{				stopVideo();				killSound();				if(Utils.genre == "advert")				{					bNextSound = false;					presentation.blackFade(stage, 0, 0, 1280, 720, 0x000000, 1.0);				}				//Utils.idx=0;				trace("video and sound stopped");			}			else			{			  	ns.play("media/"+ Utils.genre +"/"+ playList[Utils.idx]);				//debug.clearDebug(vidContainer);				trace("Utils.idx: " + Utils.idx);				if((Utils.idx==1 && Utils.genre != "meat"))				{								//trace("Utils.genre: "+Utils.genre);					starteSound();				}			}					}						private function nextSound():void		{				if(!bNextSound)			{				speechAdvert.stopSound();				killSound()				bNextSound = true;			}			else			{				speechAdvert.stopSound();				speechAdvert.playSound("media/advert/" + speechList[Utils.idx]);			}		}				private function showStrategy(e:MouseEvent):void		{			if(!presentation.togglePresentation)			{				presentation.togglePresentation = true;				presentation.drawPresentationInfo(MetaDating.debugArray, Utils.idx);			}			else			{				presentation.togglePresentation = false;				presentation.clearThis();			}		}				private function reloadVideo(e:MouseEvent):void		{			stopVideo();			dispatchEvent(new Event("reload button pressed"));			trace("reload button pressed");		}				private function standardVidSetup()		{			vid.x = 0;			vid.y = 0;			vid.width = 1280;			vid.height = 720;		}	}}