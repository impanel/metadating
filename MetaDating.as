/* AS3	Copyright 2008 Galitainment | Udk-Berlin.*/package {		/**	 *	 *	Dokumentenklasse	 *	 *	@langversion ActionScript 3.0	 *	@playerversion Flash 9.0	 *	 *	@author Sven Gali	 *	@since  12.11.2008	 *		 */	import flash.display.*;	import flash.events.*;	//import advert_options_mc;	import flash.media.Video;	import flash.system.Security;	import XMLload;	import Player;	import flash.text.*;	import flash.system.*;	import fl.controls.Slider;	import fl.events.SliderEvent;	import fl.controls.ComboBox;	import fl.managers.StyleManager;		//2011	//import CalcMeat;		//Wintersemester	import CalcKluge;	import CalcSchwiegersohn;	import CalcVerhoer;		//Sommersemester	import CalcBouncer;	import CalcAstro;	import CalcHotline;	import CalcDemo;		import Load_mc;	import flash.display.Stage;	public class MetaDating extends MovieClip 	{				//--------------------------------------		//  CONSTRUCTOR		//--------------------------------------				/**		 *	@Constructor		 */		public function MetaDating()		{			trace("Utils.genresObj: true");			trace("_skin: 3");			stage.displayState = StageDisplayState.FULL_SCREEN;			stage.scaleMode = StageScaleMode.NO_SCALE;            //stage.align = StageAlign.TOP_LEFT;			Security.allowDomain("*");			init();		}				//--------------------------------------		//  PRIVATE VARIABLES		//--------------------------------------		private var xmlLoad:XMLload;		private var genreArr:Array = new Array();		private var playList:Array = new Array();		private var speechList:Array = new Array();		private var musicList:Array = new Array();		private	var control: Boolean = false;		private var player: Player;		public static var debugArray:Array;				//2011 SS		private var brd:CalcBRD;		private var wedding1:CalcWedding1;		private var wedding2:CalcWedding2;				//2011 WS		private var videoTest: CalcVideoTests;		private var meat:CalcMeat;		private var hero:CalcHero;		private var advert:CalcAdvert;		private var checkFile:FileLoaderUtils = new FileLoaderUtils();				//Wintersemester		private var kluge: CalcKluge;		private var schwiegersohn: CalcSchwiegersohn;		private var verhoer: CalcVerhoer;				//Sommersemester		private var bouncer:CalcBouncer;		private var astro:CalcAstro;		private var hotline:CalcHotline;		private var demo:CalcDemo;			private var _reload:Boolean;		private var genre:String;				private var ld:Load_mc = new Load_mc ();				//--------------------------------------		//  PRIVATE & PROTECTED INSTANCE METHODS		//--------------------------------------		private function init ():void		{			//Security.LOCAL_WITH_NETWORK;			xmlLoad = new XMLload ();			xmlLoad.addEventListener (LadEvent.XML_LOADED, loaded);			player = new Player ();			addChild (player);						//errorTextField.selectable = false;			//errorTextField.text = Utils.errorText;			checkFile.addEventListener(UtilEvent.FILE_NOT_FOUND, fileNotFound);			//checkFile.doesFileExist("media/meat/REA_VER_4.mov");						ld.x = -47;			ld.y = 236;			ld.visible = false;			addChild (ld);						//2011 SS			btn_Brd.addEventListener(MouseEvent.CLICK, startMetadating);			btn_Wedding1.addEventListener(MouseEvent.CLICK, startMetadating);			btn_Wedding2.addEventListener(MouseEvent.CLICK, startMetadating);			//2011 WS			btn_Meat.addEventListener(MouseEvent.CLICK, startMetadating);			btn_Hero.addEventListener(MouseEvent.CLICK, startMetadating);			btn_Advert.addEventListener(MouseEvent.CLICK, showOptions);			btn_debug.addEventListener(MouseEvent.CLICK, toggleDebug);			debugTextField.text = "off";			advert_options_mc.y = 2000;			player.addEventListener("reload button pressed", reload);						//comboBox.value = "fear";			this.stage.addEventListener(KeyboardEvent.KEY_UP, keyHandler);		}				private function keyHandler(event:KeyboardEvent):void		{			trace(event.keyCode);			switch (event.keyCode)			{				/*case 65 :  //Kluge KeyCode A					//xmlLoad.laden("http://metadating.dismove.org/clips.php?Utils.genre=kluge");					xmlLoad.laden("xmls/kluge.xml");					loadBanner(true);					Utils.genre = "kluge";				break;				case 66 : //Demo KeyCode B					//xmlLoad.laden("http://metadating.dismove.org/clips.php?Utils.genre=demo");					xmlLoad.laden("xmls/demo.xml");					loadBanner(true);					Utils.genre = "demo";				break;				case 67 : //Verhör KeyCode C					xmlLoad.laden("xmls/verhoer.xml");					//loadBanner(true);					Utils.genre = "verhoer";				break;				// change keycode				case 68 : //Bouncer KeyCode D					//xmlLoad.laden("http://metadating.dismove.org/clips.php?Utils.genre=bouncer");					xmlLoad.laden("xmls/bouncer.xml");					loadBanner(true);					Utils.genre = "bouncer";				break;				case 69 : //Astro TV KeyCode E					//xmlLoad.laden("http://metadating.dismove.org/clips.php?Utils.genre=astro");					trace("astro");					xmlLoad.laden("xmls/astro.xml");					loadBanner(true);					Utils.genre = "astro";				break;				case 70 : //Hotline KeyCode F					//xmlLoad.laden("http://metadating.dismove.org/clips.php?Utils.genre=hotline");					xmlLoad.laden("xmls/hotline.xml");					loadBanner(true);					Utils.genre = "hotline";				break;*/				case 82 : //Reload KeyCode R					player.stopVideo();					reload();				break;				case 88 : //Stop Video KeyCode X					trace("end");					player.killAllSound();					player.stopVideo();						break;				case 84 : //Test Video KeyCode T					trace("test");					videoTest = new CalcVideoTests();					playList = videoTest.calculateClips();					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case 72 : //Test Video KeyCode H					trace("testHD");					videoTest = new CalcVideoTests();					playList = videoTest.calculateClipsHD();					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case 77 : //Meat Video KeyCode M					trace("Fleischesser vs. Vegetarier");					xmlLoad.laden("xmls/meat.xml");					Utils.genre = "meat";				break;				case 83 : //Hero KeyCode S					trace("Batman vs. Superman");					xmlLoad.laden("xmls/hero.xml");					Utils.genre = "hero";									break;								// FOR DEBUG ONLY				case 39 : // keyCode RIGHT jump to next video in playList					player.nextVid();				break;				case 37 : // keyCode LEFT jump to previous video in playList					player.previousVid();				break;				case 68: // keyCode D					toggleDebug();				break;			}			//Utils.idx = 0; //play playlist array from beginning		}						private function loaded(e:LadEvent):void		{			switch (Utils.genre)			{				case "kluge" :  					kluge = new CalcKluge();					playList = kluge.calculateClips(e.xmlList);					loadBanner(false);					//player.killAllSound();					player.starte(playList);				break;				case "schwiegersohn" :  					schwiegersohn = new CalcSchwiegersohn();					playList = schwiegersohn.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case "verhoer" : 					verhoer = new CalcVerhoer();					playList = verhoer.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case "bouncer" : 					bouncer = new CalcBouncer();					playList = bouncer.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case "astro" : 					astro = new CalcAstro();					playList = astro.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case "hotline" : 					hotline = new CalcHotline();					playList = hotline.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case "demo" : 					demo = new CalcDemo();					playList = demo.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									break;				case "meat" : 					meat = new CalcMeat();					playList = meat.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);								debugArray = meat.metaList;				break;				case "hero" : 					hero = new CalcHero();					playList = hero.calculateClips(e.xmlList);					loadBanner(false);					player.killAllSound();					player.starte(playList);									debugArray = hero.metaList;				break;							case "advert" : 					setFeeling();					advert = new CalcAdvert();					playList = advert.calculateClips(e.xmlList);					//speechList = advert.speechList;					loadBanner(false);					player.killAllSound();					player.starte(playList, advert.speechList, advert.musicList);						debugArray = advert.metaList;				break;				case "brd" : 					setFeeling();					brd = new CalcBRD();					playList = brd.calculateClips(e.xmlList);					//speechList = advert.speechList;					loadBanner(false);					player.killAllSound();					player.starte(playList);						debugArray = brd.metaList;				break;				case "wedding1" : 					setFeeling();					wedding1 = new CalcWedding1();					playList = wedding1.calculateClips(e.xmlList);					//speechList = advert.speechList;					loadBanner(false);					player.killAllSound();					player.starte(playList);						debugArray = wedding1.metaList;				break;				case "wedding2" : 					setFeeling();					wedding2 = new CalcWedding2();					playList = wedding2.calculateClips(e.xmlList);					//speechList = advert.speechList;					loadBanner(false);					player.killAllSound();					player.starte(playList);						debugArray = wedding2.metaList;				break;							}		}				private function reload(e:Event = null):void		{			switch (Utils.genre)			{				case "kluge" :  					loadBanner(true);					xmlLoad.laden("xmls/kluge.xml");				break;				case "schwiegersohn" :  					_reload = true;					loadBanner(true);					xmlLoad.laden("xmls/schwiegersohn.xml");				break;				case "verhoer" :					loadBanner(true);					xmlLoad.laden("xmls/verhoer.xml");				break;				case "bouncer" :					loadBanner(true);					xmlLoad.laden("xmls/bouncer.xml");				break;				case "astro" :					loadBanner(true);					xmlLoad.laden("xmls/astro.xml");				break;				case "hotline" :					loadBanner(true);					xmlLoad.laden("xmls/hotline.xml");				break;				case "demo" :					loadBanner(true);					xmlLoad.laden("xmls/demo.xml");				break;				case "meat" :					loadBanner(true);					xmlLoad.laden("xmls/meat.xml");				break;				case "hero" :					loadBanner(true);					xmlLoad.laden("xmls/hero.xml");				break;				case "advert" :					loadBanner(true);					xmlLoad.laden("xmls/advert.xml");				break;				case "brd" :					loadBanner(true);					xmlLoad.laden("xmls/brd.xml");				break;				case "wedding1" :					loadBanner(true);					xmlLoad.laden("xmls/wedding1.xml");				break;				case "wedding2" :					loadBanner(true);					xmlLoad.laden("xmls/wedding2.xml");				break;			}			Utils.idx = 0; //play playlist array from beginning		}				private function loadBanner(s:Boolean):void		{			switch(s)			{				case true:					ld.visible = true;				break;				case false:					ld.visible = false;				break;			}		}				private function startMetadating(e:MouseEvent):void		{			switch(e.currentTarget.name)			{				case "btn_start":					trace("Gefühlsmaschine");					xmlLoad.laden("xmls/advert.xml");					Utils.genre = "advert";									break;				case "btn_Hero":					trace("Batman vs. Superman");					xmlLoad.laden("xmls/hero.xml");					Utils.genre = "hero";										break;				case "btn_Meat":					trace("Fleischesser vs. Vegetarier");					xmlLoad.laden("xmls/meat.xml");					Utils.genre = "meat";				break;				case "btn_Brd":					trace("BRD started");					xmlLoad.laden("xmls/brd.xml");					Utils.genre = "brd";				break;				case "btn_Wedding1":					trace("Wedding1 started");					xmlLoad.laden("xmls/wedding1.xml");					Utils.genre = "wedding1";				break;				case "btn_Wedding2":					trace("Wedding2 started");					xmlLoad.laden("xmls/wedding2.xml");					Utils.genre = "wedding2";				break;			}		}						private function setDefinitude(e:SliderEvent):void		{			Utils.definitude = advert_options_mc.mySlider.value;			advert_options_mc.definitudeText.text = String(advert_options_mc.mySlider.value);			advert_options_mc.definitudeText.x = 216 + (220/9)*(advert_options_mc.mySlider.value - 1);			trace("SET DEFINITUDE: " + Utils.definitude);		}				private function setFeeling(e:Event = null):void		{			Utils.feeling = advert_options_mc.comboBox.value;			trace(Utils.feeling);		}				private function showOptions(e:MouseEvent):void		{			if(advert_options_mc.y > 1000)			{				var myFont:Font = new OfficinaBook();				var textFormat = new TextFormat(myFont.fontName, 20, 0xffffff);				advert_options_mc.y = 272;				advert_options_mc.mySlider.addEventListener(SliderEvent.CHANGE, setDefinitude);				advert_options_mc.mySlider.value = 0;				advert_options_mc.definitudeText.x = 216;				advert_options_mc.definitudeText.text = 1;				advert_options_mc.comboBox.addEventListener(Event.CHANGE, setFeeling);				advert_options_mc.comboBox.textField.setStyle("textFormat", textFormat);				advert_options_mc.comboBox.textField.setStyle("embedFonts", true);				//StyleManager.setStyle("textFormat", textFormat);				advert_options_mc.comboBox.dropdown.setRendererStyle("textFormat", textFormat);				advert_options_mc.comboBox.dropdown.setRendererStyle("embedFonts", true);				advert_options_mc.btn_start.addEventListener(MouseEvent.CLICK, startMetadating);			}			else			{				advert_options_mc.y = 2000;				advert_options_mc.mySlider.removeEventListener(SliderEvent.CHANGE, setDefinitude);				advert_options_mc.mySlider.value = 0;				advert_options_mc.definitudeText.x = 216;				advert_options_mc.definitudeText.text = 0;				advert_options_mc.comboBox.removeEventListener(Event.CHANGE, setFeeling);				advert_options_mc.btn_start.removeEventListener(MouseEvent.CLICK, startMetadating);			}		}				private function fileNotFound(e:UtilEvent):void		{			trace("file not found: " + checkFile.url);		}				private function toggleDebug(e:MouseEvent = null):void		{			if(!Utils.toggleDebug)			{				trace("debug activated");				Utils.toggleDebug = true;				//debugTextField.text.color = ;				debugTextField.text = "on";							}			else			{				trace("debug deactivated");				Utils.toggleDebug = false;				debugTextField.text = "off";			}					}	}}